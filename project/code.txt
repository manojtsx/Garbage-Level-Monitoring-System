#define BLYNK_AUTH_TOKEN "-Suu9pGlY3Kw9uNTWdM726riQP9Ww_jn"
#define BLYNK_TEMPLATE_ID "TMPL6zmXfKaHK"
#define BLYNK_TEMPLATE_NAME "My Project"
#define BLYNK_PRINT Serial

#include <ESP32Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include<BlynkSimpleEsp32.h>
LiquidCrystal_I2C lcd(0x27, 16, 2); // Set the LCD address to 0x27 for a 16 chars and 2 line display

#define TRIG_PIN_1 14 // Trig pin of first ultrasonic sensor
#define ECHO_PIN_1 12 // Echo pin of first ultrasonic sensor

#define TRIG_PIN_2 5 // Trig pin of second ultrasonic sensor
#define ECHO_PIN_2 4 //  Echo pin of second ultrasonic sensor

#define MOTOR_PIN 2 // GPIO pin connected to the motor
#define PWM_FREQUENCY 1000 // PWM frequency in Hz

#define BUZZ_PIN 13

char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "RM_FLAPPY";
char pass[] = "infinixhot10play";

BlynkTimer timer;
Servo myServo;

long readD1(){
    // Read distance from first ultrasonic sensor
 long duration_1, distance_1;
  digitalWrite(TRIG_PIN_1, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN_1, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN_1, LOW);
  duration_1 = pulseIn(ECHO_PIN_1, HIGH);
  distance_1 = duration_1 * 0.034 / 2;

  Serial.print("Distance 1: ");
  Serial.print(distance_1);
  Serial.println(" cm");
  delay(20);
  Blynk.virtualWrite(V0, distance_1);
  return (15-distance_1)*15/100;
}
long readD2(){
// Read distance from second ultrasonic sensor
  long duration_2, distance_2;
  digitalWrite(TRIG_PIN_2, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN_2, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN_2, LOW);
  duration_2 = pulseIn(ECHO_PIN_2, HIGH);
  distance_2 = duration_2 * 0.034 / 2;
   // Print distances to the serial monitor
 
  Serial.print("Distance 2: ");
  Serial.print(distance_2);
  Serial.println(" cm");
  delay(20);
  Blynk.virtualWrite(V1, distance_2);
  return distance_2;
}
void setup() {
  Serial.begin(9600);
  pinMode(TRIG_PIN_1, OUTPUT);
  pinMode(ECHO_PIN_1, INPUT);
  pinMode(TRIG_PIN_2, OUTPUT);
  pinMode(ECHO_PIN_2, INPUT);
  pinMode(MOTOR_PIN, OUTPUT); // Set the motor pin as an output
  pinMode(BUZZ_PIN, OUTPUT);
  myServo.attach(MOTOR_PIN);
  myServo.write(0); //in angle

  Blynk.begin(auth, ssid,pass);

  timer.setInterval(100L, readD1);
  timer.setInterval(100L, readD2);


  // To find the address of LCD screen
  // Serial.println ("I2C scanner. Scanning ...");
  // byte count = 0;
  // // 0x27 0x3F
  // Wire.begin();
  // for (byte i = 8; i < 120; i++)
  // {
  //   Wire.beginTransmission (i);
  //   if (Wire.endTransmission () == 0)
  //     {
  //     Serial.print ("Found address: ");
  //     Serial.print (i, DEC);
  //     Serial.print (" (0x");
  //     Serial.print (i, HEX);
  //     Serial.println (")");
  //     count++;
  //     delay (1);
  //     }
  // }
  // Serial.println ("Done.");
  // Serial.print ("Found ");
  // Serial.print (count, DEC);
  // Serial.println (" device(s).");

  // lcd.init();                       // Initialize the LCD
  // lcd.backlight();                  // Turn on the backlight
  // lcd.clear();                      // Clear the LCD screen
}

void loop() {
 if(readD2() < 20){
    myServo.write(180);
 }else{
    myServo.write(0);
 }

 Blynk.run();
 timer.run();
  
  // Print estimated angle of rotation


  //  lcd.setCursor(0, 0);               // Set the cursor to the first column and first row
  // lcd.print("    INOVATRIX   ");     // Print some text
  // lcd.setCursor(0,1);
  // lcd.print(counter);
  // counter = counter + 1;
  // Serial.println("Working");
  delay(500);   

  // delay(5000); // Pause for 1 second
}
